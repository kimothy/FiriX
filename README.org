#+TITLE: FiriX
#+AUTHOR: Kim Timothy Engh

* FiriX
A python interface for api requests to the crypto exchange [[https://firi.com/no][firi.com]]

The package makes it easy to buy and sell crypto as well as collect market data. The authentication
is hardened using HMAC and the =CLIENT_ID= and =SECRET_KEY= that is provided my the exchange, since
this is most secure. Read about the api at [[https://developers.firi.com/v2]].

* Usage
The only class that is required is the FiriX class. All public methods are implemented as class
methods, and to access those no instance needs to be created.

#+begin_src python :exports both :results output :python /home/kimothy/Software/python3-general-purpose/bin/python
from firix import FiriX
response = FiriX.market.ticker("BTCNOK")
print(response.json())
#+end_src

#+RESULTS:
: {'bid': '647119.6500000000000000', 'ask': '654943.1600000000000000', 'spread': '7823.5100000000000000'}

This will return a requests object that contains status, json package and so on. See documentation
on the Request object at [[https://requests.readthedocs.io/en/latest/][requests.readthedocs.io]].

The availble public methods are in the ~FiriX.market~ attribute.

To use the private methods, an instance of the class needs to be created. For this the =CLIENT_ID=
and =PRIVATE_KEY= is required. During initialization five more attributes are made available, ~order~,
~deposit~, ~balance~, ~coin~ and ==history==.

As an alternative to passing the =CLIENT_ID= and =PRIVATE_KEY= directly, it is also possible to store the =CLENT_ID=
 and =SECRET_KEY= with the class method =save_auth=.
 
#+begin_src python :noeval t :exports code
from firix import FiriX

FiriX.save_auth("MY_CLIENT_ID", "MY_SECRET_KEY")
#+end_src

This makes it possible to create a class instance using the =FiriX.with_auth= method, that uses the
stored =CLIENT_ID= and =SECRET_KEY=. The keys are stored using the well known python library [[https://pypi.org/project/keyring/][keyring]],
with uses the hosts own keyrings. This is completely optional.

#+begin_src python :exports both :results output :python /home/kimothy/Software/python3-general-purpose/bin/python
from firix import FiriX

fx = FiriX.with_auth()
response = fx.history.transactions(year='2024')

print(response)
#+end_src

#+RESULTS:
: <Response [200]>

In general this package follows the API documentation closely, however to simplify similar
endpoints, some have been consolidated to one function. Depending on the input parameters the
request will be dispatched to the correct api endpoint.

* Classes
** FiriX
This class is a convenience class that which simplifies initialization, and provides access to all
the endpoints. Each of the attributes ~FiriX.history, ~FiriX.market~, ~FiriX.order~, ~FiriX.deposit~,
~FiriX.balance~ and ~FiriX.coin~ is a reference to the classes ~FXHistory, ~FXMarket~, ~FXOrder~, ~FXDeposit~,
~FXBalance~ and ~FXCoin~.

** FXRequest
This class is a wrapper around a ~requests~ client and provides access to the epoch method for server
time, as well as it's responsible for the signatures part of the HMAC security. Normally there is
no need to manually create an instance of this class, since it is done by the ~FiriX~ class. It could
be useful to manually run post and get function with security implemented. See [[https://requests.readthedocs.io/en/latest/][requests docs]] for
more details.

** FXHistory
Provides access to the [[https://developers.firi.com/v2/#tag/History/operation/getTransactions][history]] api through class instance methods ~FXHistory.transactions~ and
~FXHistory.market~.

** FXMarket
FXMarked wraps the [[https://developers.firi.com/v2/#tag/Market][market]] api with the class methods ~FXMarket.ticker~, ~FXMarket.availible_tickers~,
~FXMarket.availible_markets~, ~FXMarket.market_info~, ~FXMarket.order_books~, ~FXMarket.history~.

** FXOrder
FXOrder makes it possible to create and cancel orders with the instance methods ~FXOrder.create~,
~FXOrder.delete~, ~FXOrder.get~ and ~FXOrder.get_by_id~.

** FXDeposit
FXDeposit provides instance methods to check history and wallet addresses.  These are named
~FXDeposit.history~ and ~FXDeposit.address~.

** FXBalance
FXBalance provides an instance method to get wallet balances, ~FXBalance.wallets~

** FXCoin
FXCoin gives access to the class instance methods ~FXCoin.pending_withdraw~ and ~FXCoin.user_address~.

* License
This software is licensed with GPLv3. See complete license at [[http://www.gnu.org/licenses/gpl-3.0.txt][gnu.org]].
